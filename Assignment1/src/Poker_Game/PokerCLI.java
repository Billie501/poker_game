package Poker_Game;

import Poker_Game.FileManager;
import static Poker_Game.FileManager.getSavedGameFiles;
import static Poker_Game.FileManager.loadGameState;
import static Poker_Game.FileManager.readGameLog;
import java.util.List;

public class PokerCLI {
    
    //variables ate encapsulated to ensure modification is controlled
    private PokerGame game; // The poker game instance
    private FileManager fileManager; // File manager for handling game files
    private GameState gameState; // The current state of the game
    private WelcomeMenu welcomemenu;
    
    public PokerCLI() {
        game = new PokerGame();
        fileManager = new FileManager();
        welcomemenu = new WelcomeMenu();
        
    }
    
    //start() was partly generated by ChatGPT
    // Starts the command-line interface for interacting with the poker game
    // Start the game with the provided username
    
    // This method will be triggered after the user clicks to start the game in the GUI
    public void start() throws InterruptedException {
        String username = AddPlayerNames.name;
        GameState record = FileManager.loadGameState(username);

        if (record != null) {
            // If user data is found, continue the game with the loaded state
            System.out.println("Welcome back, " + record.getPlayers().get(0).getName() + "!");
            game.addPlayer(record.getPlayers().get(0).getName(), record.getPlayers().get(0).getChips());
            game.setGameState(record);
        } else {
            // No saved game, create a new one
            System.out.println("Username not found. Starting a new game.");
            userSetupPlayers(username, 1000);
            ComputerSetupPlayers();
        }
        
        new GameStage(game.getGameState().getPlayers(), this.game).setVisible(true);  // Open the game stage
        game.startGame(username);
    }

    // Adds the user as a player with the given balance
    private void userSetupPlayers(String name, int balance) throws InterruptedException {
        game.addPlayer(name, balance); // Add user with the provided balance
    }

    // Adds computer players to the game
    private void ComputerSetupPlayers() throws InterruptedException {
        for (int i = 1; i < 4; i++) {
            Thread.sleep(1000); //simulate a delay for adding players
            game.addPlayer("Computer" + " " + i, 1000); // Add computer players
        }
    }

    // Save the user's data when the game ends
    
}
